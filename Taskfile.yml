version: '3'

dotenv: [.env]

env:
  ENV: local

tasks:
  db:schema:apply:
    desc: Applies schema to the database which will take care of creating the tables
    cmds:
      - docker compose run --rm dev-cli atlas schema apply --env local --auto-approve
      - task: models:generate
  
  down:
    cmds:
      - docker compose down --remove-orphans
      - pgrep -f 'docker-compose compose watch' | xargs kill -SIGINT
  
  up:
    desc: Runs the application in development mode in docker
    cmds:
      - docker compose watch
  
  graphql:schema:generate:
    desc: Generate graphql schema
    cmds:
      - docker compose run --rm dev-cli go run github.com/99designs/gqlgen generate

  logs:
    desc: Tails the logs of the application
    cmds:
      - docker compose logs -f

  rebuild:
    desc: Rebuilds images
    cmds:
      - docker compose build
      - docker compose build dev-cli

  test:rebuild:
    desc: Rebuilds test images
    cmds:
      - docker compose -f docker-compose.test.yml -p ezsplit_test build

  compose:
    desc: Acts as a proxy for `docker compose` command
    cmds:
      - docker compose {{.CLI_ARGS}}

  list:
    desc: Lists all available tasks
    cmds:
      - task --list-all

  ping:
    desc: Pings the application
    cmds:
      - curl http://localhost:$PORT/ping

  db:seed:run:
    desc: Initialize database with data
    cmds:
      - docker compose run --rm dev-cli go run cmd/seed/main.go

  test:
    dotenv: [.env.test]
    cmds:
      - cmd: docker compose -f docker-compose.test.yml -p ezsplit_test run --rm app
        ignore_error: true
      - defer: docker compose -f docker-compose.test.yml -p ezsplit_test down

  dev-cli:
    cmds:
      - docker compose run --rm dev-cli sh

  lint:
    desc: Runs linter
    cmds:
      - task: models:generate
      - docker compose run --rm dev-cli go vet ./...
      - docker run -t --rm -v $(pwd):/app -w /app golangci/golangci-lint:v1.60.1 golangci-lint run -v

  db:setup:
    cmds:
      - task: db:schema:apply
      - task: db:seed:run

  models:generate:
    desc: Generate DB models
    cmds:
      - docker compose run --rm dev-cli go run cmd/ezsplit_jet/*.go

  jet:models:generate:
    internal: true
    desc: Do not use this. Please use models:generate command instead
    vars:
      JET_COMMAND: 'jet -source=postgresql -user=$DB_USER -password=$DB_PASSWORD -host=$DB_HOST -port=$DB_PORT -dbname=$DB_NAME -schema=public -sslmode=disable -path=./.gen'
    cmds:
      - docker compose run --rm dev-cli {{.JET_COMMAND}}
