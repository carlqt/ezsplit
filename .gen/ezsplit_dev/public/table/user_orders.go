//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserOrders = newUserOrdersTable("public", "user_orders", "")

type userOrdersTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	UserID    postgres.ColumnInteger
	ItemID    postgres.ColumnInteger
	Status    postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserOrdersTable struct {
	userOrdersTable

	EXCLUDED userOrdersTable
}

// AS creates new UserOrdersTable with assigned alias
func (a UserOrdersTable) AS(alias string) *UserOrdersTable {
	return newUserOrdersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserOrdersTable with assigned schema name
func (a UserOrdersTable) FromSchema(schemaName string) *UserOrdersTable {
	return newUserOrdersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserOrdersTable with assigned table prefix
func (a UserOrdersTable) WithPrefix(prefix string) *UserOrdersTable {
	return newUserOrdersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserOrdersTable with assigned table suffix
func (a UserOrdersTable) WithSuffix(suffix string) *UserOrdersTable {
	return newUserOrdersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserOrdersTable(schemaName, tableName, alias string) *UserOrdersTable {
	return &UserOrdersTable{
		userOrdersTable: newUserOrdersTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newUserOrdersTableImpl("", "excluded", ""),
	}
}

func newUserOrdersTableImpl(schemaName, tableName, alias string) userOrdersTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		ItemIDColumn    = postgres.IntegerColumn("item_id")
		StatusColumn    = postgres.StringColumn("status")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, ItemIDColumn, StatusColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, ItemIDColumn, StatusColumn, CreatedAtColumn}
	)

	return userOrdersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		ItemID:    ItemIDColumn,
		Status:    StatusColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
