//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Items = newItemsTable("public", "items", "")

type itemsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	ReceiptID postgres.ColumnInteger
	Price     postgres.ColumnInteger
	Name      postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ItemsTable struct {
	itemsTable

	EXCLUDED itemsTable
}

// AS creates new ItemsTable with assigned alias
func (a ItemsTable) AS(alias string) *ItemsTable {
	return newItemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ItemsTable with assigned schema name
func (a ItemsTable) FromSchema(schemaName string) *ItemsTable {
	return newItemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ItemsTable with assigned table prefix
func (a ItemsTable) WithPrefix(prefix string) *ItemsTable {
	return newItemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ItemsTable with assigned table suffix
func (a ItemsTable) WithSuffix(suffix string) *ItemsTable {
	return newItemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newItemsTable(schemaName, tableName, alias string) *ItemsTable {
	return &ItemsTable{
		itemsTable: newItemsTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newItemsTableImpl("", "excluded", ""),
	}
}

func newItemsTableImpl(schemaName, tableName, alias string) itemsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		ReceiptIDColumn = postgres.IntegerColumn("receipt_id")
		PriceColumn     = postgres.IntegerColumn("price")
		NameColumn      = postgres.StringColumn("name")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, ReceiptIDColumn, PriceColumn, NameColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{ReceiptIDColumn, PriceColumn, NameColumn, CreatedAtColumn}
	)

	return itemsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ReceiptID: ReceiptIDColumn,
		Price:     PriceColumn,
		Name:      NameColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
