//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Receipts = newReceiptsTable("public", "receipts", "")

type receiptsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	UserID      postgres.ColumnInteger
	Description postgres.ColumnString
	Total       postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ReceiptsTable struct {
	receiptsTable

	EXCLUDED receiptsTable
}

// AS creates new ReceiptsTable with assigned alias
func (a ReceiptsTable) AS(alias string) *ReceiptsTable {
	return newReceiptsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReceiptsTable with assigned schema name
func (a ReceiptsTable) FromSchema(schemaName string) *ReceiptsTable {
	return newReceiptsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReceiptsTable with assigned table prefix
func (a ReceiptsTable) WithPrefix(prefix string) *ReceiptsTable {
	return newReceiptsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReceiptsTable with assigned table suffix
func (a ReceiptsTable) WithSuffix(suffix string) *ReceiptsTable {
	return newReceiptsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReceiptsTable(schemaName, tableName, alias string) *ReceiptsTable {
	return &ReceiptsTable{
		receiptsTable: newReceiptsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newReceiptsTableImpl("", "excluded", ""),
	}
}

func newReceiptsTableImpl(schemaName, tableName, alias string) receiptsTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		UserIDColumn      = postgres.IntegerColumn("user_id")
		DescriptionColumn = postgres.StringColumn("description")
		TotalColumn       = postgres.IntegerColumn("total")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		allColumns        = postgres.ColumnList{IDColumn, UserIDColumn, DescriptionColumn, TotalColumn, CreatedAtColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, DescriptionColumn, TotalColumn, CreatedAtColumn}
	)

	return receiptsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		UserID:      UserIDColumn,
		Description: DescriptionColumn,
		Total:       TotalColumn,
		CreatedAt:   CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
