//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Accounts = newAccountsTable("public", "accounts", "")

type accountsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Username  postgres.ColumnString
	Password  postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AccountsTable struct {
	accountsTable

	EXCLUDED accountsTable
}

// AS creates new AccountsTable with assigned alias
func (a AccountsTable) AS(alias string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountsTable with assigned schema name
func (a AccountsTable) FromSchema(schemaName string) *AccountsTable {
	return newAccountsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountsTable with assigned table prefix
func (a AccountsTable) WithPrefix(prefix string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountsTable with assigned table suffix
func (a AccountsTable) WithSuffix(suffix string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountsTable(schemaName, tableName, alias string) *AccountsTable {
	return &AccountsTable{
		accountsTable: newAccountsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newAccountsTableImpl("", "excluded", ""),
	}
}

func newAccountsTableImpl(schemaName, tableName, alias string) accountsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UsernameColumn  = postgres.StringColumn("username")
		PasswordColumn  = postgres.StringColumn("password")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, UsernameColumn, PasswordColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{UsernameColumn, PasswordColumn, CreatedAtColumn}
	)

	return accountsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Username:  UsernameColumn,
		Password:  PasswordColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
