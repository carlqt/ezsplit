// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AddItemToReceiptInput struct {
	ReceiptID string   `json:"receiptId"`
	Name      string   `json:"name"`
	Price     *float64 `json:"price,omitempty"`
}

type AssignOrDeleteMeToItemInput struct {
	ItemID string `json:"itemId"`
}

type AssignUserToItemInput struct {
	ItemID string `json:"itemId"`
	UserID string `json:"userId"`
}

type DeleteItemPayload struct {
	Msg string `json:"msg"`
	ID  string `json:"id"`
}

type Item struct {
	ID       string   `json:"id"`
	Name     string   `json:"name"`
	Price    *float64 `json:"price,omitempty"`
	SharedBy []*User  `json:"sharedBy"`
}

type Me struct {
	ID       string `json:"id"`
	Username string `json:"username"`
}

type Mutation struct {
}

type Query struct {
}

type ReceiptInput struct {
	Description string   `json:"description"`
	Price       *float64 `json:"price,omitempty"`
}

type User struct {
	ID       string `json:"id"`
	Username string `json:"username"`
}

type UserInput struct {
	Username string `json:"username"`
}

type UserWithJwt struct {
	ID          string `json:"id"`
	Username    string `json:"username"`
	AccessToken string `json:"accessToken"`
}

type Role string

const (
	RoleReceiptOwner      Role = "RECEIPT_OWNER"
	RoleAuthenticatedUser Role = "AUTHENTICATED_USER"
	RoleUser              Role = "USER"
)

var AllRole = []Role{
	RoleReceiptOwner,
	RoleAuthenticatedUser,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleReceiptOwner, RoleAuthenticatedUser, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
