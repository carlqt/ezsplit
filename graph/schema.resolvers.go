package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"
	"strconv"

	"github.com/carlqt/ezsplit/graph/model"
)

// CreateReceipt is the resolver for the createReceipt field.
func (r *mutationResolver) CreateReceipt(ctx context.Context, input *model.ReceiptInput) (*model.Receipt, error) {
	receipt := model.Receipt{
		Total: input.Price,
	}

	n := len(r.Resolver.ReceiptStore)
	if n == 0 {
		r.Resolver.ReceiptStore = make(map[string]model.Receipt)
	}

	id := strconv.Itoa(n + 1)
	receipt.ID = id
	r.Resolver.ReceiptStore[id] = receipt

	return &receipt, nil
}

// AddItemToReceipt is the resolver for the addItemToReceipt field.
func (r *mutationResolver) AddItemToReceipt(ctx context.Context, input *model.AddItemToReceiptInput) (*model.Receipt, error) {
	panic(fmt.Errorf("not implemented: AddItemToReceipt - addItemToReceipt"))
}

// AssignUserToItem is the resolver for the assignUserToItem field.
func (r *mutationResolver) AssignUserToItem(ctx context.Context, input *model.AssignUserToItemInput) (*model.Item, error) {
	panic(fmt.Errorf("not implemented: AssignUserToItem - assignUserToItem"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.UserInput) (*model.User, error) {
	user := model.User{
		Username: input.Username,
	}

	n := len(r.Resolver.UserStore)
	if n == 0 {
		r.Resolver.UserStore = make(map[string]model.User)
	}

	id := strconv.Itoa(n + 1)
	user.ID = id
	r.Resolver.UserStore[id] = user

	return &user, nil
}

// GetReceipts is the resolver for the getReceipts field.
func (r *queryResolver) GetReceipts(ctx context.Context) ([]*model.Receipt, error) {
	panic(fmt.Errorf("not implemented: GetReceipts - getReceipts"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users := make(([]*model.User), 0)
	for idx := range r.Resolver.UserStore {
		user := r.Resolver.UserStore[idx]
		users = append(users, &user)
	}

	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
