package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"

	"github.com/carlqt/ezsplit/graph/model"
	"github.com/carlqt/ezsplit/internal"
	"github.com/carlqt/ezsplit/internal/auth"
	"github.com/carlqt/ezsplit/internal/repository"
)

// SharedBy is the resolver for the sharedBy field.
func (r *itemResolver) SharedBy(ctx context.Context, obj *model.Item) ([]*model.User, error) {
	users, err := r.Repositories.UserOrdersRepository.SelectAllUsersFromItem(obj.ID)
	if err != nil {
		return nil, err
	}

	var modelUsers []*model.User
	for _, user := range users {
		modelUser := newModelUser(user)
		modelUsers = append(modelUsers, modelUser)
	}

	return modelUsers, nil
}

// CreateMyReceipt is the resolver for the createMyReceipt field.
func (r *mutationResolver) CreateMyReceipt(ctx context.Context, input *model.ReceiptInput) (*model.Receipt, error) {
	userClaim := ctx.Value(auth.UserClaimKey).(auth.UserClaim)

	receipt := &repository.Receipt{
		Total:       toPriceCents(*input.Price),
		Description: input.Description,
		UserID:      userClaim.ID,
	}

	err := r.Repositories.ReceiptRepository.CreateForUser(receipt)
	if err != nil {
		return nil, err
	}

	return newModelReceipt(receipt), nil
}

// AddItemToReceipt is the resolver for the addItemToReceipt field.
func (r *mutationResolver) AddItemToReceipt(ctx context.Context, input *model.AddItemToReceiptInput) (*model.Item, error) {
	price := toPriceCents(*input.Price)
	item := repository.Item{
		ReceiptID: input.ReceiptID,
		Name:      input.Name,
		Price:     price,
	}

	err := r.Repositories.ItemRepository.Create(&item)
	if err != nil {
		return nil, err
	}

	return &model.Item{
		ID:    item.ID,
		Name:  item.Name,
		Price: toPriceDisplay(price),
	}, nil
}

// AssignUserToItem is the resolver for the assignUserToItem field.
func (r *mutationResolver) AssignUserToItem(ctx context.Context, input *model.AssignUserToItemInput) (*model.Item, error) {
	panic(fmt.Errorf("not implemented: AssignUserToItem - assignUserToItem"))
}

// AssignMeToItem is the resolver for the assignMeToItem field.
func (r *mutationResolver) AssignMeToItem(ctx context.Context, input *model.AssignOrDeleteMeToItemInput) (*model.Item, error) {
	userClaim := ctx.Value(auth.UserClaimKey).(auth.UserClaim)

	// Create a New UserOrder using ItemID and userID
	// Need to return an item or user object?
	err := r.Repositories.UserOrdersRepository.Create(userClaim.ID, input.ItemID)
	if err != nil {
		return nil, err
	}

	// fetch item by ID
	item, err := r.Repositories.ItemRepository.FindByID(input.ItemID)
	if err != nil {
		return nil, err
	}

	return newModelItem(item), nil
}

// RemoveMeFromItem is the resolver for the removeMeFromItem field.
func (r *mutationResolver) RemoveMeFromItem(ctx context.Context, input *model.AssignOrDeleteMeToItemInput) (*model.DeleteItemPayload, error) {
	userClaim := ctx.Value(auth.UserClaimKey).(auth.UserClaim)

	err := r.Repositories.UserOrdersRepository.Delete(userClaim.ID, input.ItemID)
	if err != nil {
		return nil, errors.New("failed to unassign user")
	}

	// fetch item by ID
	return &model.DeleteItemPayload{
		ID:  input.ItemID,
		Msg: "Item removed",
	}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.UserInput) (*model.UserWithJwt, error) {
	if input.ConfirmPassword != input.Password {
		return nil, errors.New("password doesn't match confirm password")
	}

	password, err := auth.HashPassword(input.Password)
	if err != nil {
		return nil, err
	}

	user, err := r.Repositories.UserRepository.Create(input.Username, password)
	if err != nil {
		return nil, err
	}

	userClaim := auth.UserClaim{
		ID:       user.ID,
		Username: user.Username,
	}
	signedToken, err := auth.CreateAndSignToken(userClaim, r.Config.JWTSecret)
	if err != nil {
		log.Println(err)
		return nil, errors.New("error signing token")
	}

	setCookieFn, ok := ctx.Value(internal.ContextKeySetCookie).(func(*http.Cookie))
	if !ok {
		return nil, errors.New("error setting cookie")
	}

	setCookieFn(&http.Cookie{
		Name:     string(internal.BearerTokenCookie),
		Value:    signedToken,
		Path:     "/",
		MaxAge:   3600,
		HttpOnly: true,
		Secure:   true,
		SameSite: http.SameSiteLaxMode,
	})

	return &model.UserWithJwt{
		ID:          user.ID,
		Username:    user.Username,
		AccessToken: signedToken,
	}, nil
}

// Receipts is the resolver for the receipts field.
func (r *queryResolver) Receipts(ctx context.Context) ([]*model.Receipt, error) {
	receipts, err := r.Repositories.ReceiptRepository.SelectAll()
	if err != nil {
		return nil, err
	}

	var modelReceipts []*model.Receipt

	for _, receipt := range receipts {
		modelReceipt := newModelReceipt(receipt)
		modelReceipts = append(modelReceipts, modelReceipt)
	}

	return modelReceipts, nil
}

// Receipt is the resolver for the receipt field.
func (r *queryResolver) Receipt(ctx context.Context, id string) (*model.Receipt, error) {
	receipt, err := r.Repositories.ReceiptRepository.FindByID(id)
	if err != nil {
		return nil, err
	}

	return newModelReceipt(receipt), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.Repositories.UserRepository.GetAllUsers()
	if err != nil {
		return nil, err
	}

	var modelUsers []*model.User
	for _, user := range users {
		modelUser := &model.User{
			ID:       user.ID,
			Username: user.Username,
		}
		modelUsers = append(modelUsers, modelUser)
	}

	return modelUsers, nil
}

// User is the resolver for the user field.
func (r *receiptResolver) User(ctx context.Context, obj *model.Receipt) (*model.User, error) {
	user, err := r.Repositories.UserRepository.FindByID(obj.UserID)
	if err != nil {
		// log.Println(err)
		return nil, err
	}

	return &model.User{
		ID:       user.ID,
		Username: user.Username,
	}, nil
}

// Items is the resolver for the items field.
func (r *receiptResolver) Items(ctx context.Context, obj *model.Receipt) ([]*model.Item, error) {
	items, err := r.Repositories.ItemRepository.SelectAllForReceipt(obj.ID)
	if err != nil {
		return nil, err
	}

	var modelItems []*model.Item
	for _, item := range items {
		modelItem := newModelItem(item)
		modelItems = append(modelItems, modelItem)
	}

	return modelItems, nil
}

// Item returns ItemResolver implementation.
func (r *Resolver) Item() ItemResolver { return &itemResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Receipt returns ReceiptResolver implementation.
func (r *Resolver) Receipt() ReceiptResolver { return &receiptResolver{r} }

type itemResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type receiptResolver struct{ *Resolver }
